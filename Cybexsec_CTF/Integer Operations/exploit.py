from pwn import *
from z3 import *

# --- Info ---
# CTF: CybexCTF 2020
# Date: -
# Challenge: Integer Operations
# Description: Multiple integer overflow techniques to get the flag
# --- End Info ---

#context.log_level = 'debug'
context.terminal = ["tmux", "sp", "-h"]
context.endian = 'little'

PATH = './Integer_Operations'

REMOTE = 0

HOST = '127.0.0.1'
PORT = 1337

def level_1():

    r.recvuntil('?\n')

    data = r.recvuntil('?\n')

    given = int((data.split('to '))[1].split('?')[0])

    log.info(f'x + {given} < 0')

    lvl1 = Solver()

    given_n = BitVec('given_n', 32)
    num = BitVec('num', 32)
    sum_x = BitVec('sum_x', 32)

    lvl1.add(given_n == given)
    lvl1.add(sum_x == given_n + num)
    lvl1.add(sum_x < 0)
    lvl1.add(num > 0)

    lvl1.check()

    output = str(lvl1.model())

    num_out = (output.split('num = '))[1].split(',')[0]

    log.success(f'Integer overflow level 1: {str(num_out)}')

    r.recvuntil('integer (decimal):')
    r.sendline(str(int(num_out)))

def level_2():

    r.recvuntil('?\n')

    data = r.recvuntil('\n')

    given = int((data.split('from '))[1].split('\n')[0])

    log.info(f'({given}) - x > 0')

    lvl2 = Solver()

    given_n = BitVec('given_n', 32)
    num = BitVec('num', 32)
    sub_x = BitVec('sub_x', 32)

    lvl2.add(given_n == given)
    lvl2.add(sub_x == given_n - num)
    lvl2.add(sub_x > 0)
    lvl2.add(num < 0)

    lvl2.check()

    output = str(lvl2.model())

    num_out = (output.split('num = '))[1].split(',')[0]

    log.success(f'Integer overflow level 2: {str(num_out)}')

    r.recvuntil('integer (decimal):')
    r.sendline(str(int(num_out)))

def level_3():

    log.info('x + y = 1337')
    log.info('x > 1337')
    log.info('y > 1337')

    lvl3 = Solver()

    n = BitVec('n', 32)
    x_n = BitVec('x_n', 32)
    y_n = BitVec('y_n', 32)

    lvl3.add(n == 1337)
    lvl3.add(x_n + y_n == n)
    lvl3.add(UGE(x_n, n))
    lvl3.add(UGE(y_n, n))

    lvl3.check()

    output = str(lvl3.model())

    x = (output.split('x_n = '))[1].split(',')[0]
    y = (output.split('y_n = '))[1].split(',')[0]

    log.success(f'Integer overflow level 3 (x): {str(x)}')
    log.success(f'Integer overflow level 3 (y): {str(y)}')

    r.recvuntil('value (decimal):')
    r.sendline(str(int(x)))
    r.recvuntil('value (decimal):')
    r.sendline(str(int(y)))

def level_4():

    log.info('x > 1337')
    log.info('x**2 - 153153 = 417061379')

    lvl4 = Solver()

    n = BitVec('n', 32)
    x_n = BitVec('x_n', 32)
    n1 = BitVec('n1', 32)
    n2 = BitVec('n2', 32)

    lvl4.add(n == 1337)
    lvl4.add(n1 == 153153)
    lvl4.add(n2 == 417061379)
    lvl4.add(UGE(x_n, n))
    lvl4.add(x_n*x_n - n1 == n2)

    lvl4.check()

    output = str(lvl4.model())

    x = (output.split('x_n = '))[1].split(',')[0]

    log.success(f'Integer overflow level 4: {str(x)}')

    r.recvuntil('value (decimal):')
    r.sendline(str(int(x)))

def flag():
    r.recvuntil('your ')
    data = r.recv()
    flag = (data.split('flag:\n'))[1].split('\n')[0]
    log.success('Flag: CybexCTF{' + flag + '}')
    
context.binary = PATH
r = remote(HOST, PORT) if REMOTE else process(PATH)
level_1()
level_2()
level_3()
level_4()
flag()

r.close()
